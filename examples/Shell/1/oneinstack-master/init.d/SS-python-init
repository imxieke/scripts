#!/bin/bash
# Author:  yeho <lj2007331 AT gmail.com>
# BLOG:  https://blog.linuxeye.com
### BEGIN INIT INFO
# Provides:          SS 
# Required-Start:    $local_fs $remote_fs $network $syslog
# Required-Start:    $local_fs $remote_fs $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: SS - SS-python starts daemon
# Description:       SS - lightweight secured scoks5 proxy
### END INIT INFO
#
# chkconfig: - 90 10
# description: SS start/stop/status/restart script

SS_bin=/usr/local/python/bin/ssserver
SS_conf=/etc/shadowsocks/config.json

#SS_USAGE is the message if this script is called without any options
SS_USAGE="Usage: $0 {\e[00;32mstart\e[00m|\e[00;31mstop\e[00m|\e[00;32mstatus\e[00m|\e[00;31mrestart\e[00m}"

#SHUTDOWN_WAIT is wait time in seconds for SS proccess to stop
SHUTDOWN_WAIT=20

SS_pid(){
  echo `ps -ef | grep $SS_bin | grep -v grep | tr -s " "|cut -d" " -f2`
}

start() {
  pid=$(SS_pid)
  if [ -n "$pid" ]; then
    echo -e "\e[00;31mSS is already running (pid: $pid)\e[00m"
  else
    $SS_bin -c $SS_conf -d start
    RETVAL=$?
    if [ "$RETVAL" = "0" ]; then
      echo -e "\e[00;32mStarting SS\e[00m"
    else
      echo -e "\e[00;32mSS start Failed\e[00m"
    fi
    status
  fi
  return 0
}

status(){
  pid=$(SS_pid)
  if [ -n "$pid" ]; then
    echo -e "\e[00;32mSS is running with pid: $pid\e[00m"
  else
    echo -e "\e[00;31mSS is not running\e[00m"
  fi
}

stop(){
  pid=$(SS_pid)
  if [ -n "$pid" ]; then
    echo -e "\e[00;31mStoping SS\e[00m"
    $SS_bin -c $SS_conf -d stop
    let kwait=$SHUTDOWN_WAIT
    count=0;
    until [ `ps -p $pid | grep -c $pid` = '0' ] || [ $count -gt $kwait ]
    do
      echo -n -e "\e[00;31mwaiting for processes to exit\e[00m\n";
      sleep 1
      let count=$count+1;
    done

    if [ $count -gt $kwait ]; then
      echo -n -e "\n\e[00;31mkilling processes which didn't stop after $SHUTDOWN_WAIT seconds\e[00m"
      kill -9 $pid
    fi
  else
    echo -e "\e[00;31mSS is not running\e[00m"
  fi

  return 0
}

case $1 in
  start)
    start
    ;;
  stop)
    stop
    ;;
  restart)
    stop
    start
    ;;
  status)
    status
    ;;
  *)
    echo -e $SS_USAGE
    ;;
esac
exit 0
